package base

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"github.com/elazarl/go-bindata-assetfs"
	"io"
	"os"
	"strings"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

var _scripts_main_go = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xcd\x6e\xd4\x30\x10\x3e\xc7\x4f\xf1\x91\x53\x82\x9a\x2c\x5c\x81\x22\x55\x80\xb8\x71\xa0\x15\xe7\xf5\xda\x93\xc4\x22\x1e\x47\x13\xbb\x6d\x54\xed\xbb\x23\x27\xdb\x5d\xaa\xc2\xd1\xe3\x99\xef\x6f\x66\xd2\xe6\xb7\xee\x09\x5e\x3b\x56\xca\xf9\x29\x48\x44\xa5\x8a\xb2\x77\x71\x48\x87\xd6\x04\xbf\xeb\x43\x97\xd8\xc4\x5d\x1f\xe8\x91\x4c\xa9\x6a\xa5\x72\x01\x8e\x5d\xac\x6a\x3c\xa9\x82\x1e\x09\xd7\xd8\xfe\xdb\x1f\xf4\xf0\x3d\x7c\x7b\x24\x53\x95\x4f\x4f\x68\xf5\x34\xe1\x78\x2c\xaf\x50\x36\x4d\xf3\x19\x5f\x06\xcd\x99\x8f\x10\x03\xe2\x40\x48\x73\xe6\x0f\x1d\x96\x90\xe4\x84\x01\x33\x3a\x7c\x6a\x9a\xa6\xac\x57\xf0\xf6\xc6\xda\xaf\x34\x1b\x71\x53\x74\x81\xab\xfd\x6b\x28\x8d\x31\x70\x4f\x02\x7b\xea\x0b\xfc\x3f\xd0\xfd\x05\xf4\x17\xc9\x9c\x01\xcb\x77\xed\xfb\xb2\x56\xea\xa8\xd4\xbd\x96\x1c\x40\xb6\xf4\xf6\xe4\x68\xb3\x73\xf6\x9d\xb3\xda\x7c\xef\x76\xb8\xb1\x16\x7a\x86\xd7\xbc\x60\x23\x9e\xf3\x7b\x09\x09\x0f\x9a\x23\x06\x12\x6a\x71\x37\xd0\x82\x07\x37\x8e\x38\x10\xb4\xb5\xb4\x0e\xcd\xe9\x60\x82\xf7\x9a\xed\x8c\xc4\x96\x04\x97\xc0\x9a\x55\xf2\x86\x78\x96\x7b\xbb\x3e\x2b\x55\x64\xe6\xbb\x81\xc0\xda\xaf\xd9\xe5\x20\x2f\x68\x88\x83\x8e\x67\x3a\x23\xa4\x23\x59\x55\x14\x65\xe7\x63\x79\xb5\x4d\xdf\x20\x30\x61\x74\x4c\xe7\xc4\xdc\x16\xd9\x8b\xa5\xc4\xc1\xcd\x67\x15\x45\x29\x64\x92\xcc\xee\x9e\xc6\x05\x7d\x40\x17\xc4\xeb\x08\x93\x44\x88\x23\xac\x13\x32\x31\xc8\xf2\x4c\x92\x25\x9e\x8b\x9b\xc8\x15\x6a\xd3\x26\x89\xe1\x78\xc5\x6d\xff\x9e\x38\xf5\xb8\x38\xd3\xd8\xa1\x32\x9a\xb3\x0d\x9f\xc6\xe8\xb2\xde\x7a\xeb\xbc\x3d\x85\x9d\xbf\x4d\xe0\xa8\x1d\x23\x92\x9f\x46\x1d\x1d\xf7\x2f\x23\x10\xca\xe9\x92\x45\x27\xc1\x6f\x37\xf1\xac\xd9\x04\xee\x5c\x9f\x44\x67\xfb\x2d\x7e\x26\x7e\xb5\x04\x4b\x87\xd4\x9f\x1a\xf3\xa9\xcd\x44\xff\xc2\x50\x45\xb1\xcf\x99\xf8\x88\x76\xd7\xb6\xed\xfe\x4a\x15\xb5\x7a\x36\x95\x8f\x8f\x38\xca\x32\x85\xd5\xb3\xeb\x40\x22\xf8\x70\x8d\xbc\xdb\x7c\x5f\x29\x52\x55\x7f\x5c\xab\x6f\xae\xc1\x6e\xcc\x17\x56\x4c\x9a\x9d\xa9\x48\xa4\x56\xc5\x51\x1d\xd5\x9f\x00\x00\x00\xff\xff\x19\xe1\xeb\x0c\xb1\x03\x00\x00")

func scripts_main_go() ([]byte, error) {
	return bindata_read(
		_scripts_main_go,
		"scripts/main.go",
	)
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() ([]byte, error){
	"scripts/main.go": scripts_main_go,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func     func() ([]byte, error)
	Children map[string]*_bintree_t
}

var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"scripts": &_bintree_t{nil, map[string]*_bintree_t{
		"main.go": &_bintree_t{scripts_main_go, map[string]*_bintree_t{}},
	}},
}}

func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
